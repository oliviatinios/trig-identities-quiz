module Main exposing (main)

{-

    Group 8
    Olivia Tinios - 400034007
    Kshitij Mehta - 400012511
    Navya Sachdeva - 001426466
    Songyi Jo - 001300927

    ...

    After interviewing 6 students who are currently taking grade 12 advanced functions in school, we found out
    that many students struggle to write proofs for trigonometric identities. In particular, students have a 
    hard time figuring out which equation they should substitute in and when. During the interviews, students 
    told us that they like to learn by completing practise questions but the solutions to the practise 
    questions in the textbook, which is their only resource for practise problems, lacked detail and they didn't 
    fully understand the methodology behind writing a trigonometric proof. 

    We decided to create an app which would break practise problems down into individual steps. The practise 
    problems work like a simple multiple choice question and every time the user selects an answer they are 
    provided with an explanation of why it is correct or incorrect. This ensures that users know what is 
    happening at each step of the trigonometric proof. There is also a hint feature which provides users with
    a clue if they get stuck.

    We designed our application so that it meets Norman's principle in the following way:

    1. Discoverability:
    - We have a welcome page with instructions on what the user should do.
    - Our layout for each lesson is such that all buttons and arrows are visible so that the user knows what actions
    are possible.

    2. Feedback
    - When the user clicks on an option, they are immediately given a response of whether their answer is correct
    or incorrect.

    3. Conceptual Model
    - Due to the simplicity of our design, it gives the user a clear understanding of how our application works
    - We made the design of our application follow closely to a multiple choice quiz, which is already very well
    known to our users and this helps them use our application easily.

    4. Affordance
    - Each lesson gives the affordance of completing practise problems to the users by allowing them to choose the
    correct option and advance through all the steps.

    5. Signifiers
    - We have arrows at the top of each lesson which tells the user that they can scroll through different practise
    problems.
    - When the user hovers over the multiple choice options, they change colour. This lets the user know that the
    text can be clicked on.

    6. Mapping
    - There is a mapping between the hints and the steps in each question. If the user gets stuck on any step,
    they can use the hint feature to help them solve the question. The user knows that the hint being displayed
    is associated with the current step they are solving.

    7. Constraint
    - The user can only move to the next step once they have selected the correct option. This forces the user to
    follow all the steps required to solve the question and not skip any steps.


-}

import ProductIdentities
import GraphicSVG exposing (..)
import GraphicSVG.EllieApp exposing (..)
import List
import ReciprocalIdentities
import FundamentalIdentities
import PythagoreanIdentities



main =
    gameApp Tick
        { model = init
        , title = "Trig Identites"
        , view = view
        , update = update
        }


type Pages
    = Home
    | FundamentalIdentities
    | PythagoreanIdentities
    | ReciprocalIdentities
    | ProductIdentities


init =
    { page = Home
    , model1 = FundamentalIdentities.init
    , model2 = PythagoreanIdentities.init
    , model3 = ReciprocalIdentities.init
    , model4 = ProductIdentities.init
    , oneSat = 0
    , twoSat = 0
    , threeSat = 0
    , fourSat = 0
    , currentPage = 1
    }


-- Main colour for fundamental identities
oneColour model =
    hsl (degrees 30) model.oneSat 0.85


-- Accent colour for fundamental identities
oneAccent model =
    hsl (degrees 22) model.oneSat 0.6


-- Main colour for pythagorean identities
twoColour model =
    hsl (degrees 285) model.twoSat 0.85


-- Accent colour for pythagorean identities
twoAccent model =
    hsl (degrees 280) model.twoSat 0.6


-- Main colour for reciprocal identities
threeColour model =
    hsl (degrees 250) model.threeSat 0.9


-- Accent colour for reciprocal identities
threeAccent model =
    hsl (degrees 245) model.threeSat 0.6


-- Main colour for product identities
fourColour model =
    hsl (degrees 135) model.fourSat 0.9


-- Main colour for product identities
fourAccent model =
    hsl (degrees 130) model.fourSat 0.6


-- Messages generated by the framework (Tick) and by user interactions
type Msg m1 m2 m3 m4 m5
    = Tick Float GetKeyState
    | Msg1 (FundamentalIdentities.Msg m1)
    | Msg2 (PythagoreanIdentities.Msg m2)
    | Msg3 (ReciprocalIdentities.Msg m3)
    | Msg4 (ProductIdentities.Msg m4)
    | Goto1
    | Goto2
    | Goto3
    | Goto4
    | Goto5
    | In1
    | In2
    | In3
    | In4
    | Out1
    | Out2
    | Out3
    | Out4
    | MoveInRect ( Float, Float )


-- Model
view model =
    collage 640 380 <|
        (case model.page of
            -- Home Screen
            Home ->
                [ rectangle 400 312 |> filled blank |> addOutline (solid 2) charcoal |> move ( 55, 0 )
                , text "Welcome!" |> size 20 |> bold |> filled charcoal |> move ( 10, 10 )
                , text "Please select a lesson in the left panel to get started." |> size 16 |> filled charcoal |> move ( -110, -10 )
                ]
            -- Fundamental Identities Screen
            FundamentalIdentities ->
                List.map (map Msg1) (FundamentalIdentities.view model.model1)

            -- Pythagorean Identities Screen
            PythagoreanIdentities ->
                List.map (map Msg2) (PythagoreanIdentities.view model.model2)

            -- Reciprocal Identities Screen
            ReciprocalIdentities ->
                List.map (map Msg3) (ReciprocalIdentities.view model.model3)

            -- Product Identities Screen
            ProductIdentities ->
                List.map (map Msg4) (ProductIdentities.view model.model4)

        )
            -- Menu
            ++ [ rect 200 70 |> filled blank |> move ( 0, -190 ) |> notifyMouseMoveAt MoveInRect ]
            ++ [ -- Fundamental Identities Menu Button
                 group
                    [ rectangle 150 60
                        |> filled (oneColour model)
                        |> addOutline (solid 2)
                            (if model.page == FundamentalIdentities then
                                orange

                             else if model.oneSat == 0 then
                                blank

                             else
                                orange
                            )
                        |> makeTransparent 0.7
                        |> move ( -230, 126 )
                    , text "Fundamental Identities" |> bold |> sansserif |> centered |> filled (oneAccent model) |> move ( -230, 115 )
                    ]
                    |> notifyTap Goto1
                    |> notifyEnter In1
                    |> notifyLeave Out1
                 -- Pythagorean Identities Menu Button
               , group
                    [ rectangle 150 60
                        |> filled (twoColour model)
                        |> addOutline (solid 2)
                            (if model.page == PythagoreanIdentities then
                                purple

                             else if model.twoSat == 0 then
                                blank

                             else
                                purple
                            )
                        |> makeTransparent 0.7
                        |> move ( -230, 42 )
                    , text "Pythagorean Identities" |> bold |> sansserif |> centered |> filled (twoAccent model) |> move ( -230, 35 )
                    ]
                    |> notifyTap Goto2
                    |> notifyEnter In2
                    |> notifyLeave Out2
                 -- Reciprocal Identities Menu Button
               , group
                    [ rectangle 150 60
                        |> filled (threeColour model)
                        |> addOutline (solid 2)
                            (if model.page == ReciprocalIdentities then
                                darkBlue

                             else if model.threeSat == 0 then
                                blank

                             else
                                darkBlue
                            )
                        |> makeTransparent 0.7
                        |> move ( -230, -42 )
                    , text "Reciprocal Identities" |> bold |> sansserif |> centered |> filled (threeAccent model) |> move ( -230, -45 )
                    ]
                    |> notifyTap Goto3
                    |> notifyEnter In3
                    |> notifyLeave Out3
                 -- Product Identities Menu Button
               , group
                    [ rectangle 150 60
                        |> filled (fourColour model)
                        |> addOutline (solid 2)
                            (if model.page == ProductIdentities then
                                darkGreen

                             else if model.fourSat == 0 then
                                blank

                             else
                                darkGreen
                            )
                        |> makeTransparent 0.7
                        |> move ( -230, -126 )
                    , text "Product Identities" |> bold |> sansserif |> centered |> filled (fourAccent model) |> move ( -230, -125 )
                    ]
                    |> notifyTap Goto4
                    |> notifyEnter In4
                    |> notifyLeave Out4
               ]


-- Change app's state based on messages
update msg model =
    case msg of
        In1 ->
            { model | oneSat = 1 }

        In2 ->
            { model | twoSat = 1 }

        In3 ->
            { model | threeSat = 1 }

        In4 ->
            { model | fourSat = 1 }

        Out1 ->
            { model
                | oneSat =
                    case model.page of
                        FundamentalIdentities ->
                            model.oneSat

                        _ ->
                            0
            }

        Out2 ->
            { model
                | twoSat =
                    case model.page of
                        PythagoreanIdentities ->
                            model.twoSat

                        _ ->
                            0
            }

        Out3 ->
            { model
                | threeSat =
                    case model.page of
                        ReciprocalIdentities ->
                            model.threeSat

                        _ ->
                            0
            }

        Out4 ->
            { model
                | fourSat =
                    case model.page of
                        ProductIdentities ->
                            model.fourSat

                        _ ->
                            0
            }

        _ ->
            case model.page of
                Home ->
                    case msg of
                        Goto1 ->
                            { model
                                | page = FundamentalIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto2 ->
                            { model
                                | page = PythagoreanIdentities
                                , oneSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto3 ->
                            { model
                                | page = ReciprocalIdentities
                                , twoSat = 0
                                , oneSat = 0
                                , fourSat = 0
                            }

                        Goto4 ->
                            { model
                                | page = ProductIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , oneSat = 0
                            }

                        _ ->
                            model

                FundamentalIdentities ->
                    case msg of
                        Tick f g ->
                            { model | model1 = FundamentalIdentities.update (FundamentalIdentities.Tick f g) model.model1 }

                        Msg1 m1 ->
                            { model | model1 = FundamentalIdentities.update m1 model.model1 }

                        Msg2 _ ->
                            model

                        Msg3 _ ->
                            model

                        Msg4 _ ->
                            model

                        Goto1 ->
                            { model
                                | page = FundamentalIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto2 ->
                            { model
                                | page = PythagoreanIdentities
                                , oneSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto3 ->
                            { model
                                | page = ReciprocalIdentities
                                , twoSat = 0
                                , oneSat = 0
                                , fourSat = 0
                            }

                        Goto4 ->
                            { model
                                | page = ProductIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , oneSat = 0
                            }

                        _ ->
                            model

                PythagoreanIdentities ->
                    case msg of
                        Tick f g ->
                            { model | model2 = PythagoreanIdentities.update (PythagoreanIdentities.Tick f g) model.model2 }

                        Msg1 _ ->
                            model

                        Msg2 m2 ->
                            { model | model2 = PythagoreanIdentities.update m2 model.model2 }

                        Msg3 _ ->
                            model

                        Msg4 _ ->
                            model

                        Goto1 ->
                            { model
                                | page = FundamentalIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto2 ->
                            { model
                                | page = PythagoreanIdentities
                                , oneSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto3 ->
                            { model
                                | page = ReciprocalIdentities
                                , twoSat = 0
                                , oneSat = 0
                                , fourSat = 0
                            }

                        Goto4 ->
                            { model
                                | page = ProductIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , oneSat = 0
                            }

                        _ ->
                            model

                ReciprocalIdentities ->
                    case msg of
                        Tick f g ->
                            { model | model3 = ReciprocalIdentities.update (ReciprocalIdentities.Tick f g) model.model3 }

                        Msg1 _ ->
                            model

                        Msg2 _ ->
                            model

                        Msg3 m3 ->
                            { model | model3 = ReciprocalIdentities.update m3 model.model3 }

                        Msg4 _ ->
                            model

                        Goto1 ->
                            { model
                                | page = FundamentalIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto2 ->
                            { model
                                | page = PythagoreanIdentities
                                , oneSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto3 ->
                            { model
                                | page = ReciprocalIdentities
                                , twoSat = 0
                                , oneSat = 0
                                , fourSat = 0
                            }

                        Goto4 ->
                            { model
                                | page = ProductIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , oneSat = 0
                            }

                        _ ->
                            model

                ProductIdentities ->
                    case msg of
                        Tick f g ->
                            { model | model4 = ProductIdentities.update (ProductIdentities.Tick f g) model.model4 }

                        Msg1 _ ->
                            model

                        Msg2 _ ->
                            model

                        Msg3 _ ->
                            model

                        Msg4 m4 ->
                            { model | model4 = ProductIdentities.update m4 model.model4 }

                        Goto1 ->
                            { model
                                | page = FundamentalIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto2 ->
                            { model
                                | page = PythagoreanIdentities
                                , oneSat = 0
                                , threeSat = 0
                                , fourSat = 0
                            }

                        Goto3 ->
                            { model
                                | page = ReciprocalIdentities
                                , twoSat = 0
                                , oneSat = 0
                                , fourSat = 0
                            }

                        Goto4 ->
                            { model
                                | page = ProductIdentities
                                , twoSat = 0
                                , threeSat = 0
                                , oneSat = 0
                            }

                        _ ->
                            model